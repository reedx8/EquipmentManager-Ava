import '@testing-library/jest-dom';
import { render, screen } from '@testing-library/react';
import HeaderBar from '@/app/Components/header';
import React from 'react';
import styles from '@/styles/header.module.css';

// Mocking next.js components and hooks to avoid issues with server-side rendering in test environment
jest.mock('next/image', () => ({
    __esModule: true,
    default: (props) => {
        return <img {...props} />;
    },
}));

jest.mock('next/navigation', () => ({
    usePathname: () => '/',
}));

describe('HeaderBar', () => {
    test('renders without crashing', () => {
        render(<HeaderBar />);
    });

    test('displays the ava roasteria logo', () => {
        render(<HeaderBar />);
        const linkElement = screen.getByAltText('AVA Roasteria Logo');
        expect(linkElement).toBeInTheDocument();
    });

    test('image has the correct height and width', () => {
        render(<HeaderBar />);
        const linkElement = screen.getByAltText('AVA Roasteria Logo');
        expect(linkElement).toHaveAttribute('height', '50');
        expect(linkElement).toHaveAttribute('width', '60');
    });

    test('contains a link to the home page', () => {
        render(<HeaderBar />);
        const linkElement = screen.getByRole('link');
        expect(linkElement).toHaveAttribute('href', '/');
    });

    /* 
    When using CSS Modules in your project, you need to destructure the return value of render() to access the container element and check for class names. This is because the class names are dynamically generated by CSS Modules to ensure uniqueness.
    */
    test('has the correct CSS class', () => {
        const { container } = render(<HeaderBar />);
        expect(container.firstChild).toHaveClass(styles.main);
    });
});
